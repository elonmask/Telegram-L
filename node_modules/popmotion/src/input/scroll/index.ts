import listen from '../listen';
import action, { Action } from '../../action';
import { pipe } from '../../transformers';
import { onFrameUpdate } from 'framesync';

export type Point2D = { x: number, y: number };

export type ScrollProps = {
  from: number | Point2D,
  to: number | Point2D,
  trigger: number | Point2D,
  element: HTMLElement | Document
};

export type ScrollFactory = (props: ScrollProps) => Action;

const measureWindowScroll = () => ({
  x: window.pageXOffset,
  y: window.pageYOffset
});

const measureElementScroll = (element: HTMLElement) => () => ({
  x: element.scrollLeft,
  y: element.scrollTop
});

const getY = ({ y }: Point2D): Number => y;
const noop = (v: Point2D): Point2D => v;

const scroll: ScrollFactory = ({
  from = 0,
  to = 1,
  element,
  trigger
}) => action(({ update }) => {
  const measureScroll = element instanceof Document
    ? measureWindowScroll
    : measureElementScroll(element);

  const isNum = typeof from === 'number';

  const getPosition = isNum ? getY : noop;

  //const mapPositionToRelative = isNum

  const updateScrollPosition = pipe(
    measureScroll,
    getPosition,
    update
  );

  const sub = listen(element, 'resize scroll')
    .start(() => onFrameUpdate(updateScrollPosition));

  return {
    stop: () => sub.unsubscribe()
  };
});

export default scroll;
